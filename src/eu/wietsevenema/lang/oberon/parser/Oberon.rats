/**
 * Grammar for the Oberon language.
 *
 * @author Wietse Venema
 */

module eu.wietsevenema.lang.oberon.parser.Oberon;

header {
	import eu.wietsevenema.lang.oberon.ast.declarations.*;
	import eu.wietsevenema.lang.oberon.ast.expressions.*;
	import eu.wietsevenema.lang.oberon.ast.statements.*;
	import eu.wietsevenema.lang.oberon.ast.types.*;

	import java.util.ArrayList;
	import java.util.List;

	//import xtc.util.Utilities;	
}

option withLocation, constant, main(Program);

String Symbol = SymbolCharacters Spacing ;

//TODO inherit van xtc. 
transient String SymbolCharacters =
	 <Divison>             "DIV"
	/ <Modulus>             "MOD"
	/ <Or> 	  	          "OR"
	/ <Hash> 		          "#"
	/ <Assign> 	          ":="
  / <GreaterGreaterEqual> ">>="
  / <LessLessEqual>       "<<="
  / <GreaterGreater>      ">>"
  / <LessLess>            "<<"
  / <PlusEqual>           "+="
  / <MinusEqual>          "-="
  / <StarEqual>           "*="
  / <SlashEqual>          "/="
  / <PercentEqual>        "%="
  / <AmpersandEqual>      "&="
  / <CaretEqual>          "^="
  / <BarEqual>            "|="
  / <PlusPlus>            "++"
  / <MinusMinus>          "--"
  / <AmpersandAmpersand>  "&&"
  / <BarBar>              "||"
  / <LessEqual>           "<="
  / <GreaterEqual>        ">="
  / <EqualEqual>          "=="
  / <BangEqual>           "!="
  / <Semicolon>           ";"
  / <Colon>               ":"
  / <Comma>               ","
  / <Period>              "."
  / <OpenBrace>           "{"
  / <CloseBrace>          "}"
  / <OpenParenthesis>     "("
  / <CloseParenthesis>    ")"
  / <OpenBracket>         "["
  / <CloseBracket>        "]"
  / <Bang>                "!"
  / <Tilde>               "~"
  / <Plus>                "+"
  / <Minus>               "-"
  / <Star>                "*"
  / <Slash>               "/"
  / <Percent>             "%"
  / <Less>                "<"
  / <Greater>             ">"
  / <Equal>               "="
  / <Ampersand>           "&"
  / <Caret>               "^"
  / <Bar>                 "|"
  / <Question>            "?"
  ;


//---Spacing---//

transient void Spacing            =
  ( Space / LineTerminator / TraditionalComment / EndOfLineComment )*
  ;

transient void Space              = ' ' / '\t' / '\f' ;
transient void TraditionalComment = "/*" ( '*' !'/' / !'*' _ )* "*/" ;
transient void EndOfLineComment   =
  "//" ( ![\n\r] _ )* (LineTerminator / &EndOfFile) ;
transient void LineTerminator     = '\r' '\n' / '\r' / '\n' ;
transient void EndOfFile          = !_ ;


//---Identifiers---//

Identifier Identifier = vn:VariableName Spacing
  	{
		yyValue = new Identifier(vn);
	}
	;

// String VariableIdentifier = VariableName Spacing;

//FIXME
String TypeIdentifier = VariableName Spacing;

String VariableName = [a-zA-Z][a-zA-Z0-9]*;

//---Constants---//

Node Constant = 
    IntegerConstant Spacing
  / BooleanConstant 
  ;

IntegerConstant IntegerConstant = nr:DecimalNumeral 
	 {
		try {
        	yyValue = new IntegerConstant(Integer.decode(nr));
     	} catch (NumberFormatException x) {
        	yyValue = null; 
     	}
	}
	;


transient String DecimalNumeral    = '0' / NonZeroDigit Digit* ;
transient String NonZeroDigit      = [1-9] ;
transient String Digit             = [0-9] ;

String Word = WordCharacters Spacing ;
transient String WordCharacters = [A-Z][A-Z0-9]* ;

BooleanConstant BooleanConstant =
    "TRUE":Word 
	{
		yyValue = new BooleanConstant( Boolean.TRUE );
	}
  / "FALSE":Word
	{
		yyValue = new BooleanConstant( Boolean.FALSE );
	}
	;

//Expressions//

public Node Program = Spacing Module EndOfFile;
//Used in testsuite
public TestExpression Expression = 
	Spacing exp:EqualityExpression EndOfFile
	{
		yyValue= new TestExpression(exp);
	}
	;

/*
All operators of the same precedence associate from left to right. 
For example, x-y-z stands for (x-y)-z.

Operator precedence in Oberon-0. 
---------------------------------------------------------
| Operator		| Description							|
---------------------------------------------------------
| ~ 			| Logical negation 						|
---------------------------------------------------------
| OR 			| Logical disjunction			 		|
---------------------------------------------------------
| &				| Logical conjunction			 		|
---------------------------------------------------------
| * DIV MOD 	| product, integer quotient, modulus	|
---------------------------------------------------------
| + -			| sum, difference						|
---------------------------------------------------------
| = # < <= > >= | equal, unequal, less, less or equal, 	|
|				| greater, greater or equal				|
---------------------------------------------------------
*/

//{ProcedureDeclaration ";"}.
Declarations Declarations = 
	cd:ConstantDecls? td:TypeDecls? vd:VarDecls? 
	{
		yyValue = new Declarations( cd, td, vd );
	}
	;
		
//FIXME / ArrayType / RecordType.
Type Type = 
	"BOOLEAN":Word 
	{
		yyValue = new BooleanType();
	}
  / "INTEGER":Word
	{
		yyValue = new IntegerType();
	}
	;

List<ConstantDecl> ConstantDecls = 
	"CONST":Word cds:(ConstantDecl)+
	{
		yyValue = new ArrayList<ConstantDecl>(cds.list());
	}
	;

ConstantDecl ConstantDecl = 
	id:Identifier void:"=":Symbol exp:EqualityExpression void:";":Symbol 
	{
		yyValue = new ConstantDecl(id, exp);
	}
	;

List<TypeDecl> TypeDecls = 
	"TYPE":Word tds:(TypeDecl)+
	{
		yyValue = new ArrayList<TypeDecl>(tds.list());
	}
	;

TypeDecl TypeDecl =
	id:Identifier void:"=":Symbol type:Type void:";":Symbol 
	{
		yyValue = new TypeDecl(id, type);
	}
	;

List<VarDecl> VarDecls = 
	"VAR":Word vds:(VarDecl)+
	{
		yyValue = new ArrayList<VarDecl>(vds.list());
	}
	;

VarDecl VarDecl = 
	ids:IdentList void:":":Symbol type:Type void:";":Symbol
	{
		yyValue = new VarDecl(ids, type);
	}
	;
	
	
List<Identifier> IdentList = 
	 i:Identifier is:( void:",":Symbol Identifier)*
     { 
		yyValue = new Pair<Identifier>(i, is).list(); 
	}
	;

//TODO valideer idstart == idend;
Module Module = void:"MODULE":Word idstart:Identifier void:";":Symbol decls:Declarations 
		 stats:( void:"BEGIN":Word StatementSequence)? void:"END":Word idend:Identifier void:".":Symbol
		{
			yyValue = new Module(idstart, decls, stats );
		}
		;

List<Statement> StatementSequence = 
		statement:Statement statements:( void:";":Symbol Statement)*
        { 
			yyValue = new Pair<Statement>(statement, statements).list(); 
		}
		;


//| ProcedureCall | IfStatement | WhileStatement].
Statement Statement = yyValue:AssignmentStatement; 

AssignmentStatement AssignmentStatement = 
	id:Identifier ":=":Symbol exp:EqualityExpression
		{
			yyValue= new AssignmentStatement(id, exp);
		}
	;

generic EqualityExpression =
    <Recursion>  EqualityExpression EqualityOperator AdditiveExpression
  / <Base>      yyValue:AdditiveExpression 
  ;

generic AdditiveExpression = 
	  <Recursion> AdditiveExpression AdditiveOperator MultiplicativeExpression
	/ <Base> yyvalue:MultiplicativeExpression
	;

generic MultiplicativeExpression = 
	  <Recursion> MultiplicativeExpression MultiplicativeOperator LogicalConjunctiveExpression
	/ <Base> yyvalue:LogicalConjunctiveExpression
	;

generic LogicalConjunctiveExpression = 
  	  <Recursion> LogicalConjunctiveExpression "&":Symbol LogicalDisjunctiveExpression
	/ <Base> yyvalue:LogicalDisjunctiveExpression
	;

generic LogicalDisjunctiveExpression = 
  	  <Recursion> LogicalDisjunctiveExpression "OR":Symbol UnaryExpression
	/ <Base> yyvalue:UnaryExpression
	;
	
LogicalNegationExpression LogicalNegationExpression =
	void:"~":Symbol ue:UnaryExpression 
	{
    	yyValue = new LogicalNegationExpression((Expression)ue);
	}
	;
	
String MultiplicativeOperator = 
	  <Product>		"*":Symbol 
	/ <Quotient> 	"DIV":Symbol
	/ <Modulus>		"MOD":Symbol 
	;

String AdditiveOperator = 
	  <Sum>			"+":Symbol 
	/ <Difference> 	"-":Symbol
	;

String EqualityOperator =
    <Equal>       		"=":Symbol
  / <NotEqual>    		"#":Symbol
  / <Less> 		  		"<":Symbol
  / <LessOrEqual> 		"<=":Symbol
  / <Greater> 	  	 	">":Symbol
  / <GreaterOrEqual> 	">=":Symbol
  ;

Node UnaryExpression =
    <LogicalNot> 	yyValue:LogicalNegationExpression
  / <UnaryPlusMin> 	yyValue:UnaryPlusMin
  / <Base>       	yyValue:PrimaryExpression
  ;

UnaryMinExpression UnaryPlusMin = 
	void:"-":Symbol ue:UnaryExpression 
	{
    	yyValue = new UnaryMinExpression((Expression)ue);
	}
  / void:"+":Symbol yyValue:UnaryExpression  /* ignore unary plus */
	;
	

Node PrimaryExpression =
   <Constant>                  yyValue:Constant
 / <Identifier>                yyValue:Identifier 
 / <ParenthesizedExpression>   yyValue:ParenthesizedExpression
 ;

generic ParenthesizedExpression =
  void:"(":Symbol yyValue:EqualityExpression void:")":Symbol
  ;


